const UICSS="\n  #recis-gl-bench { position: absolute; right: 1rem; bottom: 1rem; z-index:1000; -webkit-user-select: none; -moz-user-select: none; user-select: none; }\n  #recis-gl-bench recis-gl { position: relative; display: block; margin: 4px; padding: 0 2px 0 2px; background: #11101d; border-radius: 0.1rem; cursor: pointer; opacity: 0.9; }\n  #recis-gl-bench svg { height: 60px; margin: 0 0px 0px 4px; }\n  #recis-gl-bench recis-text { font-size: 16px; font-family: 'Lato', 'Segoe UI'; dominant-baseline: middle; text-anchor: middle; }\n  #recis-gl-bench .recis-gl-mem { font-size: 12px; fill: white; }\n  #recis-gl-bench .recis-gl-fps { font-size: 13px; fill: white; }\n  #recis-gl-bench recis-line { stroke-width: 5; stroke: white; stroke-linecap: round; }\n  #recis-gl-bench polyline { fill: none; stroke: white; stroke-linecap: round; stroke-linejoin: round; stroke-width: 3.5; }\n  #recis-gl-bench rect { fill: #1d1b31; }\n  #recis-gl-bench .recis-opacity { stroke: black; }\n  ",UISVG='\n  <recis-gl class="recis-gl-box" title="FPS Graph RECIS">\n    <svg viewBox="0 0 60 60">\n      <recis-text x="27" y="56" class="recis-gl-fps">00 FPS</recis-text>\n      <recis-text x="30" y="8" class="recis-gl-mem"></recis-text>\n      <rect x="0" y="14" rx="4" ry="4" width="60" height="32"></rect>\n      <polyline class="recis-gl-chart"></polyline>\n    </svg>\n    <svg viewBox="0 0 14 60" class="recis-gl-cpu-svg">\n      <recis-line x1="7" y1="38" x2="7" y2="11" class="recis-opacity"/>\n      <recis-line x1="7" y1="38" x2="7" y2="11" class="recis-gl-cpu" stroke-dasharray="0 27"/>\n      <path d="M5.35 43c-.464 0-.812.377-.812.812v1.16c-.783.1972-1.421.812-1.595 1.624h-1.16c-.435 0-.812.348-.812.812s.348.812.812.812h1.102v1.653H1.812c-.464 0-.812.377-.812.812 0 .464.377.812.812.812h1.131c.1943.783.812 1.392 1.595 1.595v1.131c0 .464.377.812.812.812.464 0 .812-.377.812-.812V53.15h1.653v1.073c0 .464.377.812.812.812.464 0 .812-.377.812-.812v-1.131c.783-.1943 1.392-.812 1.595-1.595h1.131c.464 0 .812-.377.812-.812 0-.464-.377-.812-.812-.812h-1.073V48.22h1.102c.435 0 .812-.348.812-.812s-.348-.812-.812-.812h-1.16c-.1885-.783-.812-1.421-1.595-1.624v-1.131c0-.464-.377-.812-.812-.812-.464 0-.812.377-.812.812v1.073H6.162v-1.073c0-.464-.377-.812-.812-.812zm.58 3.48h2.088c.754 0 1.363.609 1.363 1.363v2.088c0 .754-.609 1.363-1.363 1.363H5.93c-.754 0-1.363-.609-1.363-1.363v-2.088c0-.754.609-1.363 1.363-1.363z" style="fill: grey"></path>\n    </svg>\n    <svg viewBox="0 0 14 60" class="recis-gl-gpu-svg">\n      <recis-line x1="7" y1="38" x2="7" y2="11" class="recis-opacity"/>\n      <recis-line x1="7" y1="38" x2="7" y2="11" class="recis-gl-gpu" stroke-dasharray="0 27"/>\n      <path d="M1.94775 43.3772a.736.736 0 10-.00416 1.472c.58535.00231.56465.1288.6348.3197.07015.18975.04933.43585.04933.43585l-.00653.05405v8.671a.736.736 0 101.472 0v-1.4145c.253.09522.52785.1495.81765.1495h5.267c1.2535 0 2.254-.9752 2.254-2.185v-3.105c0-1.2075-1.00625-2.185-2.254-2.185h-5.267c-.28865 0-.5635.05405-.8165.1495.01806-.16445.04209-.598-.1357-1.0787-.22425-.6072-.9499-1.2765-2.0125-1.2765zm2.9095 3.6455c.42435 0 .7659.36225.7659.8119v2.9785c0 .44965-.34155.8119-.7659.8119s-.7659-.36225-.7659-.8119v-2.9785c0-.44965.34155-.8119.7659-.8119zm4.117 0a2.3 2.3 0 012.3 2.3 2.3 2.3 0 01-2.3 2.3 2.3 2.3 0 01-2.3-2.3 2.3 2.3 0 012.3-2.3z" style="fill: grey"></path>\n    </svg>\n  </recis-gl>\n  ';class GLBench{constructor(e,s={}){let t;this.css=UICSS,this.svg=UISVG,this.paramLogger=()=>{},this.chartLogger=()=>{},this.chartLen=20,this.chartHz=20,this.names=[],this.cpuAccums=[],this.gpuAccums=[],this.activeAccums=[],this.chart=new Array(this.chartLen),this.now=()=>performance&&performance.now?performance.now():Date.now(),this.updateUI=()=>{[].forEach.call(this.nodes["recis-gl-gpu-svg"],(e=>e.style.display=this.trackGPU?"inline":"none"))},Object.assign(this,s),this.detected=0,this.finished=[],this.isFramebuffer=0,this.frameId=0;let i,c=0;const r=e=>{++c<20?t=requestAnimationFrame(r):(this.detected=Math.ceil(1e3*c/(e-i)/70),cancelAnimationFrame(t)),i||(i=e)};if(requestAnimationFrame(r),e){const s=async(s,t)=>Promise.resolve(setTimeout((()=>{e.getError();const i=this.now()-s;t.forEach(((e,s)=>{e&&(this.gpuAccums[s]+=i)}))}),0)),t=(e,t,i)=>{const c=t.now();e.apply(i,arguments),t.trackGPU&&t.finished.push(s(c,t.activeAccums.slice(0)))},i="drawElements";e[i]?e[i]=t(e[i],this,e):console.log("bench: cannot attach to webgl function")}if(!this.withoutUI){this.dom||(this.dom=document.body);const e=document.createElement("recis-gl");e.id="recis-gl-bench",this.dom.appendChild(e),this.dom.insertAdjacentHTML("afterbegin",'<style id="recis-gl-bench-style">'+this.css+"</style>"),this.dom=e,this.dom.addEventListener("click",(()=>{this.trackGPU=!this.trackGPU,this.updateUI()})),this.paramLogger=((e,s,t)=>{const i=["recis-gl-cpu","recis-gl-gpu","recis-gl-mem","recis-gl-fps","recis-gl-gpu-svg","recis-gl-chart"],c={...i};return i.forEach((e=>c[e]=s.getElementsByClassName(e))),this.nodes=c,(s,i,r,h,a,n,o)=>{c["recis-gl-cpu"][s].style.strokeDasharray=(.27*i).toFixed(0)+" 100",c["recis-gl-gpu"][s].style.strokeDasharray=(.27*r).toFixed(0)+" 100",c["recis-gl-mem"][s].innerHTML=t[s]?t[s]:h?"mem: "+h.toFixed(0)+"mb":"",c["recis-gl-fps"][s].innerHTML="FPS: "+a.toFixed(1),e(t[s],i,r,h,a,n,o)}})(this.paramLogger,this.dom,this.names),this.chartLogger=((e,s)=>{const t={"recis-gl-chart":this.dom.getElementsByClassName("recis-gl-chart")};return(s,i,c)=>{let r="";const h=i.length;for(let e=0;e<h;e++){const s=(c+e+1)%h;void 0!==i[s]&&(r=r+" "+(60*e/(h-1)).toFixed(1)+","+(45-.5*i[s]/this.detected).toFixed(1))}t["recis-gl-chart"][s].setAttribute("points",r),e(this.names[s],i,c)}})(this.chartLogger)}}addUI(e){-1===this.names.indexOf(e)&&(this.names.push(e),this.dom&&(this.dom.insertAdjacentHTML("beforeend",this.svg),this.updateUI()),this.cpuAccums.push(0),this.gpuAccums.push(0),this.activeAccums.push(!1))}nextFrame(e){this.frameId++;const s=e||this.now();if(this.frameId<=1)this.paramFrame=this.frameId,this.paramTime=s;else{const e=s-this.paramTime;if(e>=1e3){const t=this.frameId-this.paramFrame,i=t/e*1e3;for(let s=0;s<this.names.length;s++){const c=this.cpuAccums[s]/e*100,r=this.gpuAccums[s]/e*100,h=performance&&performance.memory?performance.memory.usedJSHeapSize/(1<<20):0;this.paramLogger(s,c,r,h,i,e,t),this.cpuAccums[s]=0,Promise.all(this.finished).then((()=>{this.gpuAccums[s]=0,this.finished=[]}))}this.paramFrame=this.frameId,this.paramTime=s}}if(this.detected&&this.chartFrame){const e=s-this.chartTime;let t=this.chartHz*e/1e3;for(;--t>0&&this.detected;){const t=(this.frameId-this.chartFrame)/e*1e3;this.chart[this.circularId%this.chartLen]=t;for(let e=0;e<this.names.length;e++)this.chartLogger(e,this.chart,this.circularId);this.circularId++,this.chartFrame=this.frameId,this.chartTime=s}}else this.chartFrame=this.frameId,this.chartTime=s,this.circularId=0}begin(e){this.updateAccums(e)}end(e){this.updateAccums(e)}updateAccums(e){let s=this.names.indexOf(e);-1===s&&(s=this.names.length,this.addUI(e));const t=this.now(),i=t-this.t0;for(let e=0;e<s+1;e++)this.activeAccums[e]&&(this.cpuAccums[e]+=i);this.activeAccums[s]=!this.activeAccums[s],this.t0=t}}export default GLBench;
