const fs=require("fs"),process=require("process"),log=require("@vladmandic/pilogger"),canvas=require("canvas"),tf=require("@tensorflow/tfjs-node"),Human=require("../../dist/human.node.js"),config={debug:!1,face:{enabled:!0},hand:{enabled:!0,maxDetected:2,minConfidence:.5,detector:{modelPath:"handtrack.json"}},body:{enabled:!0},object:{enabled:!0},gestures:{enabled:!0}};async function main(){log.header(),globalThis.Canvas=canvas.Canvas,globalThis.ImageData=canvas.ImageData;const e=new Human.Human(config);log.info("Human:",e.version),await e.load(),log.info("Loaded models:",Object.keys(e.models).filter((a=>e.models[a]))),log.info("Memory state:",e.tf.engine().memory());const a=process.argv[2],t=process.argv[3];if(4!==process.argv.length)log.error("Parameters: <input-image> <output-image> missing");else if(fs.existsSync(a)||a.startsWith("http")){const n=await canvas.loadImage(a);log.info("Loaded image",a,n.width,n.height);const s=new canvas.Canvas(n.width,n.height),o=s.getContext("2d");o.drawImage(n,0,0);const r=o.getImageData(0,0,s.width,s.height),i=await e.detect(r),g=i.persons;for(let e=0;e<g.length;e++){const a=g[e].face,t=a?`score:${a.score} age:${a.age} gender:${a.gender} iris:${a.iris}`:null,n=g[e].body,s=n?`score:${n.score} keypoints:${n.keypoints?.length}`:null;log.data(`Detected: #${e}: Face:${t} Body:${s} LeftHand:${g[e].hands.left?"yes":"no"} RightHand:${g[e].hands.right?"yes":"no"} Gestures:${g[e].gestures.length}`)}const d=new canvas.Canvas(n.width,n.height);d.getContext("2d").drawImage(i.canvas||n,0,0),e.draw.all(d,i);const c=fs.createWriteStream(t);c.on("finish",(()=>log.state("Output image:",t,d.width,d.height))),c.on("error",(e=>log.error("Output error:",t,e)));d.createJPEGStream({quality:.5,progressive:!0,chromaSubsampling:!0}).pipe(c)}else log.error(`File not found: ${process.argv[2]}`)}main();
